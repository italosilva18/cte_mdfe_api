#!/usr/bin/env python3
"""
Script para verificar atualiza√ß√µes de pacotes
Compara as vers√µes do requirements.txt com as mais recentes dispon√≠veis
"""

import subprocess
import sys
import re
from datetime import datetime

def parse_requirements(filename='requirements.txt'):
    """L√™ e parseia o arquivo requirements.txt"""
    packages = {}
    try:
        with open(filename, 'r', encoding='utf-8-sig') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # Parse package==version
                    match = re.match(r'^([a-zA-Z0-9\-_]+)==(.+)$', line)
                    if match:
                        package_name = match.group(1)
                        version = match.group(2)
                        packages[package_name.lower()] = version
    except FileNotFoundError:
        print(f"Arquivo {filename} n√£o encontrado!")
        return {}
    
    return packages

def check_updates():
    """Verifica atualiza√ß√µes dispon√≠veis"""
    print("üîç Verificando atualiza√ß√µes de pacotes...")
    print("=" * 60)
    
    packages = parse_requirements()
    
    if not packages:
        print("Nenhum pacote encontrado no requirements.txt")
        return
    
    print(f"üì¶ Total de pacotes: {len(packages)}")
    print("=" * 60)
    
    # Pacotes importantes para verificar manualmente
    important_packages = {
        'django': '5.1.4',  # Latest stable
        'djangorestframework': '3.15.2',
        'djangorestframework-simplejwt': '5.3.1',
        'pillow': '11.0.0',
        'reportlab': '4.2.5',
        'python-dotenv': '1.0.1',
        'PyJWT': '2.10.1',
        'psycopg2-binary': '2.9.10',
        'pyyaml': '6.0.2',
        'qrcode': '8.0',
        'python-barcode': '0.15.1',
        'xmltodict': '0.14.2',
        'drf-yasg': '1.21.8'
    }
    
    updates_available = []
    security_updates = []
    
    for package, current_version in sorted(packages.items()):
        latest_version = important_packages.get(package)
        
        if latest_version:
            if current_version != latest_version:
                updates_available.append({
                    'package': package,
                    'current': current_version,
                    'latest': latest_version
                })
                
                # Verificar se √© atualiza√ß√£o de seguran√ßa (vers√£o patch)
                current_parts = current_version.split('.')
                latest_parts = latest_version.split('.')
                
                if len(current_parts) >= 2 and len(latest_parts) >= 2:
                    if current_parts[0] < latest_parts[0] or current_parts[1] < latest_parts[1]:
                        security_updates.append(package)
    
    # Mostrar resultados
    if updates_available:
        print("\nüìã ATUALIZA√á√ïES DISPON√çVEIS:")
        print("-" * 60)
        for update in updates_available:
            package = update['package']
            current = update['current']
            latest = update['latest']
            
            # Indicador de tipo de atualiza√ß√£o
            if package in security_updates:
                indicator = "üî¥"  # Major/Minor update
            else:
                indicator = "üü°"  # Patch update
                
            print(f"{indicator} {package:30} {current:15} ‚Üí {latest:15}")
        
        print("\nüìä RESUMO:")
        print(f"  - Total de atualiza√ß√µes: {len(updates_available)}")
        print(f"  - Atualiza√ß√µes importantes: {len(security_updates)}")
        
        # Gerar novo requirements.txt sugerido
        print("\nüí° SUGEST√ïES:")
        print("1. Para atualizar todos os pacotes, execute:")
        print("   pip install --upgrade " + " ".join([u['package'] for u in updates_available[:5]]))
        
        if len(updates_available) > 5:
            print("   ... e mais " + str(len(updates_available) - 5) + " pacotes")
        
        print("\n2. Para atualizar o Django (recomendado testar primeiro):")
        print("   pip install --upgrade django==4.2.20  # Manter na vers√£o LTS")
        print("   # ou")
        print("   pip install --upgrade django==5.1.4   # √öltima vers√£o")
        
    else:
        print("\n‚úÖ Todos os pacotes monitorados est√£o atualizados!")
    
    # Avisos especiais
    print("\n‚ö†Ô∏è  AVISOS:")
    print("- Django 4.2.20 √© a vers√£o LTS atual (suporte at√© 2026)")
    print("- Django 5.1.4 √© a √∫ltima vers√£o, mas pode ter breaking changes")
    print("- Sempre teste em ambiente de desenvolvimento antes de atualizar")
    print("- Fa√ßa backup do banco de dados antes de atualizar o Django")
    
    print("\nüìÖ Verifica√ß√£o realizada em:", datetime.now().strftime("%d/%m/%Y %H:%M:%S"))

if __name__ == "__main__":
    check_updates()